#!/bin/bash -eu

VERSION="1.7" # Version of this script
WORKSPACE="${HOME}/.create-rails-app/${VERSION}"
CACHE_A_DIR="${WORKSPACE}/cache_a"  # Ruby versions
CACHE_B_DIR="${WORKSPACE}/cache_b"  # Railtie
CACHE_C_DIR="${WORKSPACE}/cache_c"  # rails new generation
RAILS_BRANCH='main'
TODAY=$(date +"%d-%m-%Y")
EPOCH="${TODAY}-$(date +%s)" # seconds since epoch
SCRIPT_DIR="$( cd "$( dirname "${BASH_SOURCE[0]}" )" &> /dev/null && pwd )"

# Uncomment during development
set -x
USE_CACHE_A="1"
USE_CACHE_B="1"
USE_CACHE_C="1"


main() {
  prep
  checkout
  rails_new
  install_gems
  setup_demos
  upload
}


prep() {
  mkdir -p ${CACHE_B_DIR}
  mkdir -p ${CACHE_A_DIR}
  mkdir -p ${CACHE_C_DIR}
  check_ruby_version
}


check_ruby_version() {
  if [ -n "$(ls -A ${CACHE_A_DIR} 2>/dev/null)" ] && [ "${USE_CACHE_A}" -eq "1" ]; then
    echo "Using CACHE_A ${CACHE_A_DIR}"
  else
    curl -s https://cache.ruby-lang.org/pub/ruby/index.txt > ${CACHE_A_DIR}/index.txt
  fi

  expected_version=$(cat ${CACHE_A_DIR}/index.txt | tail -n 1 | cut -f1 | cut -d '-' -f2)
  found_version=$(ruby -v | perl -nle 'm/ruby ([\d\.]*)/; print $1')
  if ! [ "${expected_version}" = "${found_version}" ]; then
    echo "error: Ruby ${expected_version} expected"
    exit 1
  fi
}


checkout() {
  if [ -n "$(ls -A ${CACHE_B_DIR} 2>/dev/null)" ] && [ "${USE_CACHE_B}" -eq "1" ]; then
    echo "Using CACHE_B ${CACHE_B_DIR}"
    return
  fi
  git clone -b "${RAILS_BRANCH}" --single-branch https://github.com/rails/rails ${CACHE_B_DIR}
}


rails_new() {
  if [ -n "$(ls -A ${CACHE_C_DIR} 2>/dev/null)" ] && [ "${USE_CACHE_C}" -eq "1" ]; then
    echo "Using CACHE_C ${CACHE_C_DIR}"
    return
  fi


  (cd ${CACHE_B_DIR}
   bundle install
   bundle exec ./railties/exe/rails --version
   bundle exec ./railties/exe/rails new --help
   git config --global init.defaultBranch main # useful at github actions
   bundle exec ./railties/exe/rails new ${CACHE_C_DIR}/created-rails-app --dev --database=postgresql --no-webpack --skip-hotwire
   cd ${CACHE_C_DIR}/created-rails-app
   git config user.email "example@example.com"
   git config user.name "Sam Bot"
   git add --all
   git commit -m "Did bundle exec ./railties/exe/rails new created-rails-app --dev --database=postgresql --no-webpack --skip-hotwire"
   fix_gemfile # because rails new with --dev creates a locally pointing Gemfile
   bundle add hotwire-rails --git https://github.com/hotwired/hotwire-rails.git
   git add --all
   git commit -m "bundle add hotwire-rails --git https://github.com/hotwired/hotwire-rails.git"
   ./bin/rails hotwire:install # need ./bin/rails turbo:install:redis ?
   git add --all
   git commit -m "./bin/rails hotwire:install")
}


##
# Re-point gemfile entry for rails gem
#
fix_gemfile() {
  cd ${CACHE_C_DIR}/created-rails-app
  ${SCRIPT_DIR}/bin/sed -i '/^gem "rails"/c\REMOVED' Gemfile # remove line
  replacement="gem 'rails', :github => 'rails/rails', :branch => '${RAILS_BRANCH}'"
  ${SCRIPT_DIR}/bin/sed -i "/^REMOVED/c\\$replacement" Gemfile # add back line
  rm Gemfile.lock
  bundle install

  # these 2 is probably not needed, its there to make nokigiri happy
  bundle lock --add-platform ruby
  bundle lock --remove-platform x86_64-linux || true # its ok to fail on macos
  git add --all
  git commit -m 'Use proper path for gem "rails", path: "...'
}

##
# Some useful gems
#
install_gems() {
  install_pundit
  install_rspec
  install_factory_bot
  install_vcr
  install_bootstrap
}


##
# Install pundit
#
install_pundit() {
  cd ${CACHE_C_DIR}/created-rails-app
  bundle add pundit
  git add --all
  git commit -m 'Install pundit'  
  bundle exec rails g pundit:install
  git add --all
  git commit -m 'Install pundit'
}


install_rspec() {
  cd ${CACHE_C_DIR}/created-rails-app
  bundle add rspec-rails
  git add --all
  git commit -m 'Install rspec'
  ./bin/rails generate rspec:install
  mkdir spec/support
  git add --all
  git commit -m 'Install rspec'
}


install_factory_bot() {
  cd ${CACHE_C_DIR}/created-rails-app
  bundle add factory_bot_rails --group development,test
  git add --all
  git commit -m 'Install factory_bot_rails'
}


install_vcr() {
  cd ${CACHE_C_DIR}/created-rails-app
  bundle add vcr webmock
  cp ${SCRIPT_DIR}/files/vcr.rb spec/support/
  git add --all
  git commit -m 'Install vcr'
}


install_bootstrap() {
  cd ${CACHE_C_DIR}/created-rails-app
  bundle add bootstrap
  git add --all
  git commit -m 'Install bootstrap'
  replacement=' *= require bootswatch'
  ${SCRIPT_DIR}/bin/sed -i "/require_tree/c\\$replacement" app/assets/stylesheets/application.css
  git add --all
  git commit -m 'Install bootstrap'
  cp -r ${SCRIPT_DIR}/files/bootswatch.scss app/assets/stylesheets/
  git add --all
  git commit -m 'Install bootstrap'
  cp -r ${SCRIPT_DIR}/files/bootswatch app/assets/stylesheets/
  git add --all
  git commit -m 'Install bootstrap'
  echo 'import "bootstrap"' >> app/javascript/application.js
  git add --all
  git commit -m 'Install bootstrap'
  cp ${SCRIPT_DIR}/files/importmap.rb /tmp/importmap.rb
  ${SCRIPT_DIR}/bin/sed -i '$e cat /tmp/importmap.rb' config/importmap.rb
  git add --all
  git commit -m 'Install bootstrap'
}


setup_demos() {
  cd ${CACHE_C_DIR}/created-rails-app
  bin/rails generate scaffold post title:string body:text published:boolean --no-test-framework
  git add --all
  git commit -m 'Generated scaffold post title:string body:text published:boolean'
  cat ${SCRIPT_DIR}/files/bootswatch_kitchen_sink.html >> app/views/posts/index.html.erb
  git add --all
  git commit -m 'Added bootstrap kitchen sink to /posts page'
}


upload() {
  (
   # branch with clean history, orpaned root, e.g. 23-08-2021-1629735904
   cd ${CACHE_C_DIR}/created-rails-app
   git config user.email "example@example.com"
   git config user.name "Sam Bot"
   git remote add remote1 git@github.com:la-ruby/created-rails-7-app.git
   git push remote1 main:${EPOCH}

   # main branch with deltas
   cd ${WORKSPACE}
   git clone git@github.com:la-ruby/created-rails-7-app.git downloaded-created-rails-7-app || true
   cd ${WORKSPACE}/downloaded-created-rails-7-app/
   git config user.email "example@example.com"
   git config user.name "Sam Bot"
   git checkout main
   find -not -path "./.git/*" -not -name ".git" -delete
   rsync -aP --exclude='.git/' --exclude='node_modules/*' ${CACHE_C_DIR}/created-rails-app/ ${WORKSPACE}/downloaded-created-rails-7-app/
   git config user.email "example@example.com"
   git config user.name "Sam Bot"
   git add --all
   git commit -m "Updates for ${TODAY}" || true
   git push origin main)
}


# find() {
#   if [[ "$OSTYPE" == "darwin"* ]]; then
#     gfind "$@"
#   else
#     find "$@"
#   fi
# }

main
